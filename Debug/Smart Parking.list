
Smart Parking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a48  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000b78  08000b78  00010b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b90  08000b90  00010b98  2**0
                  CONTENTS
  4 .ARM          00000000  08000b90  08000b90  00010b98  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b90  08000b98  00010b98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b90  08000b90  00010b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b94  08000b94  00010b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000000  08000b98  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08000b98  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010b98  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003a37  00000000  00000000  00010bc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a6a  00000000  00000000  000145f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001d8  00000000  00000000  00015068  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000180  00000000  00000000  00015240  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002842  00000000  00000000  000153c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001f0d  00000000  00000000  00017c02  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000a405  00000000  00000000  00019b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00023f14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005c0  00000000  00000000  00023f90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000b60 	.word	0x08000b60

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000b60 	.word	0x08000b60

08000170 <EXTI0_IRQHandler>:
/* ================================================ */


// EXTI0
void EXTI0_IRQHandler (void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 0;
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3

}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	20000028 	.word	0x20000028

08000194 <EXTI1_IRQHandler>:

// EXTI1
void EXTI1_IRQHandler (void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 1;
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3

}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	20000028 	.word	0x20000028

080001b8 <EXTI2_IRQHandler>:

// EXTI2
void EXTI2_IRQHandler (void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 2;
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3

}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	20000028 	.word	0x20000028

080001dc <EXTI3_IRQHandler>:

// EXTI3
void EXTI3_IRQHandler (void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 3;
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3

}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	20000028 	.word	0x20000028

08000200 <EXTI4_IRQHandler>:

// EXTI4
void EXTI4_IRQHandler (void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 4;
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3

}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	20000028 	.word	0x20000028

08000224 <EXTI9_5_IRQHandler>:

// EXTI5 ---> EXTI9
void EXTI9_5_IRQHandler (void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5)	{EXTI->PR |= (1<<5); GP_IRQ_CallBack[5]();}
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	if (EXTI->PR & 1<<6)	{EXTI->PR |= (1<<6); GP_IRQ_CallBack[6]();}
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	if (EXTI->PR & 1<<7)	{EXTI->PR |= (1<<7); GP_IRQ_CallBack[7]();}
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	if (EXTI->PR & 1<<8)	{EXTI->PR |= (1<<8); GP_IRQ_CallBack[8]();}
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	if (EXTI->PR & 1<<9)	{EXTI->PR |= (1<<9); GP_IRQ_CallBack[9]();}
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	20000028 	.word	0x20000028

080002cc <EXTI15_10_IRQHandler>:

// EXTI10 ---> EXTI15
void EXTI15_10_IRQHandler (void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<10)	{EXTI->PR |= (1<<10); GP_IRQ_CallBack[10]();}
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
	if (EXTI->PR & 1<<11)	{EXTI->PR |= (1<<11); GP_IRQ_CallBack[11]();}
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
	if (EXTI->PR & 1<<12)	{EXTI->PR |= (1<<12); GP_IRQ_CallBack[12]();}
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
	if (EXTI->PR & 1<<13)	{EXTI->PR |= (1<<13); GP_IRQ_CallBack[13]();}
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
	if (EXTI->PR & 1<<14)	{EXTI->PR |= (1<<14); GP_IRQ_CallBack[14]();}
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
	if (EXTI->PR & 1<<15)	{EXTI->PR |= (1<<15); GP_IRQ_CallBack[15]();}
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000382:	4798      	blx	r3
}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	20000028 	.word	0x20000028

08000390 <Get_CRLH_POS>:
#include <math.h>

#include "MCAL/Stm32_F103C6_GPIO.h"
uint8_t Get_CRLH_POS(uint16_t GPIO_PIN_x)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_PIN_x)
 800039a:	88fb      	ldrh	r3, [r7, #6]
 800039c:	2b80      	cmp	r3, #128	; 0x80
 800039e:	d042      	beq.n	8000426 <Get_CRLH_POS+0x96>
 80003a0:	2b80      	cmp	r3, #128	; 0x80
 80003a2:	dc11      	bgt.n	80003c8 <Get_CRLH_POS+0x38>
 80003a4:	2b08      	cmp	r3, #8
 80003a6:	d036      	beq.n	8000416 <Get_CRLH_POS+0x86>
 80003a8:	2b08      	cmp	r3, #8
 80003aa:	dc06      	bgt.n	80003ba <Get_CRLH_POS+0x2a>
 80003ac:	2b02      	cmp	r3, #2
 80003ae:	d02e      	beq.n	800040e <Get_CRLH_POS+0x7e>
 80003b0:	2b04      	cmp	r3, #4
 80003b2:	d02e      	beq.n	8000412 <Get_CRLH_POS+0x82>
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d028      	beq.n	800040a <Get_CRLH_POS+0x7a>
 80003b8:	e047      	b.n	800044a <Get_CRLH_POS+0xba>
 80003ba:	2b20      	cmp	r3, #32
 80003bc:	d02f      	beq.n	800041e <Get_CRLH_POS+0x8e>
 80003be:	2b40      	cmp	r3, #64	; 0x40
 80003c0:	d02f      	beq.n	8000422 <Get_CRLH_POS+0x92>
 80003c2:	2b10      	cmp	r3, #16
 80003c4:	d029      	beq.n	800041a <Get_CRLH_POS+0x8a>
 80003c6:	e040      	b.n	800044a <Get_CRLH_POS+0xba>
 80003c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003cc:	d033      	beq.n	8000436 <Get_CRLH_POS+0xa6>
 80003ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003d2:	dc09      	bgt.n	80003e8 <Get_CRLH_POS+0x58>
 80003d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003d8:	d029      	beq.n	800042e <Get_CRLH_POS+0x9e>
 80003da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003de:	d028      	beq.n	8000432 <Get_CRLH_POS+0xa2>
 80003e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003e4:	d021      	beq.n	800042a <Get_CRLH_POS+0x9a>
 80003e6:	e030      	b.n	800044a <Get_CRLH_POS+0xba>
 80003e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003ec:	d027      	beq.n	800043e <Get_CRLH_POS+0xae>
 80003ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003f2:	dc03      	bgt.n	80003fc <Get_CRLH_POS+0x6c>
 80003f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003f8:	d01f      	beq.n	800043a <Get_CRLH_POS+0xaa>
 80003fa:	e026      	b.n	800044a <Get_CRLH_POS+0xba>
 80003fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000400:	d01f      	beq.n	8000442 <Get_CRLH_POS+0xb2>
 8000402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000406:	d01e      	beq.n	8000446 <Get_CRLH_POS+0xb6>
 8000408:	e01f      	b.n	800044a <Get_CRLH_POS+0xba>
		{
		case GPIO_PIN_0 :
			return 0;
 800040a:	2300      	movs	r3, #0
 800040c:	e01e      	b.n	800044c <Get_CRLH_POS+0xbc>
			break;

		case GPIO_PIN_1 :
			return 4;
 800040e:	2304      	movs	r3, #4
 8000410:	e01c      	b.n	800044c <Get_CRLH_POS+0xbc>
			break;

		case GPIO_PIN_2 :
			return 8;
 8000412:	2308      	movs	r3, #8
 8000414:	e01a      	b.n	800044c <Get_CRLH_POS+0xbc>
			break;

		case GPIO_PIN_3 :
			return 12;
 8000416:	230c      	movs	r3, #12
 8000418:	e018      	b.n	800044c <Get_CRLH_POS+0xbc>
			break;
		case GPIO_PIN_4 :
			return 16;
 800041a:	2310      	movs	r3, #16
 800041c:	e016      	b.n	800044c <Get_CRLH_POS+0xbc>
			break;

		case GPIO_PIN_5 :
			return 20;
 800041e:	2314      	movs	r3, #20
 8000420:	e014      	b.n	800044c <Get_CRLH_POS+0xbc>
			break;

		case GPIO_PIN_6 :
			return 24;
 8000422:	2318      	movs	r3, #24
 8000424:	e012      	b.n	800044c <Get_CRLH_POS+0xbc>
			break;

		case GPIO_PIN_7 :
			return 28;
 8000426:	231c      	movs	r3, #28
 8000428:	e010      	b.n	800044c <Get_CRLH_POS+0xbc>
			break;

		case GPIO_PIN_8 :
			return 0;
 800042a:	2300      	movs	r3, #0
 800042c:	e00e      	b.n	800044c <Get_CRLH_POS+0xbc>
			break;

		case GPIO_PIN_9 :
			return 4;
 800042e:	2304      	movs	r3, #4
 8000430:	e00c      	b.n	800044c <Get_CRLH_POS+0xbc>
			break;

		case GPIO_PIN_10 :
			return 8;
 8000432:	2308      	movs	r3, #8
 8000434:	e00a      	b.n	800044c <Get_CRLH_POS+0xbc>
			break;

		case GPIO_PIN_11 :
			return 12;
 8000436:	230c      	movs	r3, #12
 8000438:	e008      	b.n	800044c <Get_CRLH_POS+0xbc>
			break;
		case GPIO_PIN_12 :
			return 16;
 800043a:	2310      	movs	r3, #16
 800043c:	e006      	b.n	800044c <Get_CRLH_POS+0xbc>
			break;

		case GPIO_PIN_13 :
			return 20;
 800043e:	2314      	movs	r3, #20
 8000440:	e004      	b.n	800044c <Get_CRLH_POS+0xbc>
			break;

		case GPIO_PIN_14 :
			return 24;
 8000442:	2318      	movs	r3, #24
 8000444:	e002      	b.n	800044c <Get_CRLH_POS+0xbc>
			break;

		case GPIO_PIN_15 :
			return 28;
 8000446:	231c      	movs	r3, #28
 8000448:	e000      	b.n	800044c <Get_CRLH_POS+0xbc>
			break;
		}
		return 0;
 800044a:	2300      	movs	r3, #0
}
 800044c:	4618      	mov	r0, r3
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	bc80      	pop	{r7}
 8000454:	4770      	bx	lr

08000456 <MCAL_GPIO_Init>:
 * @retval		- None
 * Note			- STM32F103C6 has five ports (A:E) but LQFP48 includes (PORTA, PORTB) fully
 * 				  and (PORTC, PORTD) partially.
 */
void MCAL_GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_PinConfig_t *PinConfig)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	b086      	sub	sp, #24
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
 800045e:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL) (x=A..G) Configures Pins [0:7]
	// Port configuration register high (GPIOx_CRH) (x=A..G) Configures Pins [8:15]
	volatile uint32_t *configRegister = NULL;
 8000460:	2300      	movs	r3, #0
 8000462:	613b      	str	r3, [r7, #16]
	configRegister = (PinConfig->GPIO_PinNumber <= GPIO_PIN_7) ? &GPIOx->CRL : &GPIOx->CRH;
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	881b      	ldrh	r3, [r3, #0]
 8000468:	2b80      	cmp	r3, #128	; 0x80
 800046a:	d801      	bhi.n	8000470 <MCAL_GPIO_Init+0x1a>
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	e001      	b.n	8000474 <MCAL_GPIO_Init+0x1e>
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	3304      	adds	r3, #4
 8000474:	613b      	str	r3, [r7, #16]

	// Clear CNFx[1:0] MODEx[1:0]
	uint8_t pinPos = Get_CRLH_POS(PinConfig->GPIO_PinNumber);
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	881b      	ldrh	r3, [r3, #0]
 800047a:	4618      	mov	r0, r3
 800047c:	f7ff ff88 	bl	8000390 <Get_CRLH_POS>
 8000480:	4603      	mov	r3, r0
 8000482:	73fb      	strb	r3, [r7, #15]
	(*configRegister) &= ~(0b1111 << pinPos);
 8000484:	693b      	ldr	r3, [r7, #16]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	7bfa      	ldrb	r2, [r7, #15]
 800048a:	210f      	movs	r1, #15
 800048c:	fa01 f202 	lsl.w	r2, r1, r2
 8000490:	43d2      	mvns	r2, r2
 8000492:	401a      	ands	r2, r3
 8000494:	693b      	ldr	r3, [r7, #16]
 8000496:	601a      	str	r2, [r3, #0]

	uint8_t pinConf = 0;
 8000498:	2300      	movs	r3, #0
 800049a:	75fb      	strb	r3, [r7, #23]
	if((PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_OD) ||  (PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_PP) || (PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_OD))
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	789b      	ldrb	r3, [r3, #2]
 80004a0:	2b07      	cmp	r3, #7
 80004a2:	d00b      	beq.n	80004bc <MCAL_GPIO_Init+0x66>
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	789b      	ldrb	r3, [r3, #2]
 80004a8:	2b07      	cmp	r3, #7
 80004aa:	d007      	beq.n	80004bc <MCAL_GPIO_Init+0x66>
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	789b      	ldrb	r3, [r3, #2]
 80004b0:	2b04      	cmp	r3, #4
 80004b2:	d003      	beq.n	80004bc <MCAL_GPIO_Init+0x66>
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	789b      	ldrb	r3, [r3, #2]
 80004b8:	2b05      	cmp	r3, #5
 80004ba:	d10b      	bne.n	80004d4 <MCAL_GPIO_Init+0x7e>
	{
		pinConf = ((PinConfig->GPIO_Mode - 4) << 2) | PinConfig->GPIO_Speed;
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	789b      	ldrb	r3, [r3, #2]
 80004c0:	3b04      	subs	r3, #4
 80004c2:	009b      	lsls	r3, r3, #2
 80004c4:	b25a      	sxtb	r2, r3
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	78db      	ldrb	r3, [r3, #3]
 80004ca:	b25b      	sxtb	r3, r3
 80004cc:	4313      	orrs	r3, r2
 80004ce:	b25b      	sxtb	r3, r3
 80004d0:	75fb      	strb	r3, [r7, #23]
 80004d2:	e029      	b.n	8000528 <MCAL_GPIO_Init+0xd2>
	}
	else
	{
		if((PinConfig->GPIO_Mode == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_Mode == GPIO_MODE_ANALOG))
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	789b      	ldrb	r3, [r3, #2]
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d003      	beq.n	80004e4 <MCAL_GPIO_Init+0x8e>
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	789b      	ldrb	r3, [r3, #2]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d104      	bne.n	80004ee <MCAL_GPIO_Init+0x98>
		{
			pinConf = PinConfig->GPIO_Mode << 2;
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	789b      	ldrb	r3, [r3, #2]
 80004e8:	009b      	lsls	r3, r3, #2
 80004ea:	75fb      	strb	r3, [r7, #23]
 80004ec:	e01c      	b.n	8000528 <MCAL_GPIO_Init+0xd2>
		}
		else if(PinConfig->GPIO_Mode == GPIO_MODE_INPUT_AF)
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	789b      	ldrb	r3, [r3, #2]
 80004f2:	2b08      	cmp	r3, #8
 80004f4:	d102      	bne.n	80004fc <MCAL_GPIO_Init+0xa6>
		{
			pinConf = GPIO_MODE_INPUT_FLO << 2;
 80004f6:	2304      	movs	r3, #4
 80004f8:	75fb      	strb	r3, [r7, #23]
 80004fa:	e015      	b.n	8000528 <MCAL_GPIO_Init+0xd2>
		}
		else
		{
			pinConf = GPIO_MODE_INPUT_PU << 2;
 80004fc:	2308      	movs	r3, #8
 80004fe:	75fb      	strb	r3, [r7, #23]
			if(PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PU)
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	789b      	ldrb	r3, [r3, #2]
 8000504:	2b02      	cmp	r3, #2
 8000506:	d107      	bne.n	8000518 <MCAL_GPIO_Init+0xc2>
			{
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	68db      	ldr	r3, [r3, #12]
 800050c:	683a      	ldr	r2, [r7, #0]
 800050e:	8812      	ldrh	r2, [r2, #0]
 8000510:	431a      	orrs	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	e007      	b.n	8000528 <MCAL_GPIO_Init+0xd2>
			}
			else
			{
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	68db      	ldr	r3, [r3, #12]
 800051c:	683a      	ldr	r2, [r7, #0]
 800051e:	8812      	ldrh	r2, [r2, #0]
 8000520:	43d2      	mvns	r2, r2
 8000522:	401a      	ands	r2, r3
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	60da      	str	r2, [r3, #12]
			}

		}
	}

	(*configRegister) |= (pinConf << pinPos);
 8000528:	693b      	ldr	r3, [r7, #16]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	7df9      	ldrb	r1, [r7, #23]
 800052e:	7bfa      	ldrb	r2, [r7, #15]
 8000530:	fa01 f202 	lsl.w	r2, r1, r2
 8000534:	431a      	orrs	r2, r3
 8000536:	693b      	ldr	r3, [r7, #16]
 8000538:	601a      	str	r2, [r3, #0]


}
 800053a:	bf00      	nop
 800053c:	3718      	adds	r7, #24
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
	...

08000544 <MCAL_RCC_GetSYS_CLKFreq>:
//1111: SYSCLK divided by 512
const uint8_t AHBPrescTable[16U] = {0,0,0,0,0,0,0,0,1,2,3,4,6,7,8,9}; // Shift 1 right == multiply by 2


uint32_t MCAL_RCC_GetSYS_CLKFreq(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
//	Set and cleared by hardware to indicate which clock source is used as system clock.
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: not applicable
	switch((RCC->CFGR >> 2)& 0b11)
 8000548:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <MCAL_RCC_GetSYS_CLKFreq+0x34>)
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	089b      	lsrs	r3, r3, #2
 800054e:	f003 0303 	and.w	r3, r3, #3
 8000552:	2b01      	cmp	r3, #1
 8000554:	d006      	beq.n	8000564 <MCAL_RCC_GetSYS_CLKFreq+0x20>
 8000556:	2b01      	cmp	r3, #1
 8000558:	d302      	bcc.n	8000560 <MCAL_RCC_GetSYS_CLKFreq+0x1c>
 800055a:	2b02      	cmp	r3, #2
 800055c:	d004      	beq.n	8000568 <MCAL_RCC_GetSYS_CLKFreq+0x24>
 800055e:	e005      	b.n	800056c <MCAL_RCC_GetSYS_CLKFreq+0x28>
	{
		case 0:
			return HSI_RC_CLK;
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <MCAL_RCC_GetSYS_CLKFreq+0x38>)
 8000562:	e004      	b.n	800056e <MCAL_RCC_GetSYS_CLKFreq+0x2a>
			break;

		case 1:
			// TODO need to calculate it // HSE user should specify it
			return HSE_CLK;
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <MCAL_RCC_GetSYS_CLKFreq+0x3c>)
 8000566:	e002      	b.n	800056e <MCAL_RCC_GetSYS_CLKFreq+0x2a>
			break;

		case 2:
			// TODO need to calculate it // PLLCLK and PLLMULL and PLL Source MUX
			return 16000000;
 8000568:	4b05      	ldr	r3, [pc, #20]	; (8000580 <MCAL_RCC_GetSYS_CLKFreq+0x3c>)
 800056a:	e000      	b.n	800056e <MCAL_RCC_GetSYS_CLKFreq+0x2a>
			break;
		default:
			return 0;
 800056c:	2300      	movs	r3, #0
			break;
	}
}
 800056e:	4618      	mov	r0, r3
 8000570:	46bd      	mov	sp, r7
 8000572:	bc80      	pop	{r7}
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	40021000 	.word	0x40021000
 800057c:	007a1200 	.word	0x007a1200
 8000580:	00f42400 	.word	0x00f42400

08000584 <MCAL_RCC_GetHCLKFreq>:

uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	// Bits 7:4 HPRE: AHB pre-scaler
	return (MCAL_RCC_GetSYS_CLKFreq() >> AHBPrescTable[(RCC->CFGR >> 4) & 0xF]); // The first shift is multiplication
 8000588:	f7ff ffdc 	bl	8000544 <MCAL_RCC_GetSYS_CLKFreq>
 800058c:	4601      	mov	r1, r0
 800058e:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <MCAL_RCC_GetHCLKFreq+0x20>)
 8000590:	685b      	ldr	r3, [r3, #4]
 8000592:	091b      	lsrs	r3, r3, #4
 8000594:	f003 030f 	and.w	r3, r3, #15
 8000598:	4a03      	ldr	r2, [pc, #12]	; (80005a8 <MCAL_RCC_GetHCLKFreq+0x24>)
 800059a:	5cd3      	ldrb	r3, [r2, r3]
 800059c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40021000 	.word	0x40021000
 80005a8:	08000b80 	.word	0x08000b80

080005ac <MCAL_RCC_GetPCLK1Freq>:

uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	// Bits 10:8 PPRE1: APB low-speed pre-scaler (APB1)
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR >> 8) & 0b111]); // The first shift is multiplication
 80005b0:	f7ff ffe8 	bl	8000584 <MCAL_RCC_GetHCLKFreq>
 80005b4:	4601      	mov	r1, r0
 80005b6:	4b05      	ldr	r3, [pc, #20]	; (80005cc <MCAL_RCC_GetPCLK1Freq+0x20>)
 80005b8:	685b      	ldr	r3, [r3, #4]
 80005ba:	0a1b      	lsrs	r3, r3, #8
 80005bc:	f003 0307 	and.w	r3, r3, #7
 80005c0:	4a03      	ldr	r2, [pc, #12]	; (80005d0 <MCAL_RCC_GetPCLK1Freq+0x24>)
 80005c2:	5cd3      	ldrb	r3, [r2, r3]
 80005c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40021000 	.word	0x40021000
 80005d0:	08000b78 	.word	0x08000b78

080005d4 <MCAL_RCC_GetPCLK2Freq>:
uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	// Bits 13:11 PPRE2: APB high-speed pre-scaler (APB2)
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR >> 11) & 0b111]); // The first shift is multiplication
 80005d8:	f7ff ffd4 	bl	8000584 <MCAL_RCC_GetHCLKFreq>
 80005dc:	4601      	mov	r1, r0
 80005de:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <MCAL_RCC_GetPCLK2Freq+0x20>)
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	0adb      	lsrs	r3, r3, #11
 80005e4:	f003 0307 	and.w	r3, r3, #7
 80005e8:	4a03      	ldr	r2, [pc, #12]	; (80005f8 <MCAL_RCC_GetPCLK2Freq+0x24>)
 80005ea:	5cd3      	ldrb	r3, [r2, r3]
 80005ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40021000 	.word	0x40021000
 80005f8:	08000b78 	.word	0x08000b78

080005fc <MCAL_UART_Init>:
 * @param [in] 		- UART_Config: All UART configuration
 * @retval 			- none
 * Note				- support for now Asynchronous mode & clock 8 MHz
 */
void MCAL_UART_Init(USART_Typedef* USARTx, USART_Config_t* UART_Config)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	6039      	str	r1, [r7, #0]
	uint32_t pclk, BRR;

	/* 1. Enable the clock for given USART peripheral */
	if(USARTx == USART1)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4a59      	ldr	r2, [pc, #356]	; (8000770 <MCAL_UART_Init+0x174>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d109      	bne.n	8000622 <MCAL_UART_Init+0x26>
	{
		RCC_USART1_CLK_EN();
 800060e:	4b59      	ldr	r3, [pc, #356]	; (8000774 <MCAL_UART_Init+0x178>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	4a58      	ldr	r2, [pc, #352]	; (8000774 <MCAL_UART_Init+0x178>)
 8000614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000618:	6193      	str	r3, [r2, #24]
		Global_USART_Config[0] = UART_Config;
 800061a:	4a57      	ldr	r2, [pc, #348]	; (8000778 <MCAL_UART_Init+0x17c>)
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	e01a      	b.n	8000658 <MCAL_UART_Init+0x5c>
	}
	else if(USARTx == USART2)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a55      	ldr	r2, [pc, #340]	; (800077c <MCAL_UART_Init+0x180>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d109      	bne.n	800063e <MCAL_UART_Init+0x42>
	{
		RCC_USART2_CLK_EN();
 800062a:	4b52      	ldr	r3, [pc, #328]	; (8000774 <MCAL_UART_Init+0x178>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	4a51      	ldr	r2, [pc, #324]	; (8000774 <MCAL_UART_Init+0x178>)
 8000630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000634:	61d3      	str	r3, [r2, #28]
		Global_USART_Config[1] = UART_Config;
 8000636:	4a50      	ldr	r2, [pc, #320]	; (8000778 <MCAL_UART_Init+0x17c>)
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	6053      	str	r3, [r2, #4]
 800063c:	e00c      	b.n	8000658 <MCAL_UART_Init+0x5c>
	}
	else if(USARTx == USART3)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4a4f      	ldr	r2, [pc, #316]	; (8000780 <MCAL_UART_Init+0x184>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d108      	bne.n	8000658 <MCAL_UART_Init+0x5c>
	{
		RCC_USART3_CLK_EN();
 8000646:	4b4b      	ldr	r3, [pc, #300]	; (8000774 <MCAL_UART_Init+0x178>)
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	4a4a      	ldr	r2, [pc, #296]	; (8000774 <MCAL_UART_Init+0x178>)
 800064c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000650:	61d3      	str	r3, [r2, #28]
		Global_USART_Config[2] = UART_Config;
 8000652:	4a49      	ldr	r2, [pc, #292]	; (8000778 <MCAL_UART_Init+0x17c>)
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	6093      	str	r3, [r2, #8]
	}
	/* 2. Enable USART Module */
	USARTx->CR1 |= 1<<13;							// bit 13 UE: USART enable
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	60da      	str	r2, [r3, #12]

	/* 3. Enable USART TX/RX engines according to the USART_Mode configuration item */
	USARTx->CR1 |= UART_Config->USART_Mode; 		// USART_CR1 bit 3 TE: transmitter enable & bit 2 RE: receiver enable
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	683a      	ldr	r2, [r7, #0]
 800066a:	7812      	ldrb	r2, [r2, #0]
 800066c:	431a      	orrs	r2, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	60da      	str	r2, [r3, #12]

	/* 4. Pay-load width */
	USARTx->CR1 |= UART_Config->Payload_Length;		// USARTx->CR1 bit 12 M: word length
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	68db      	ldr	r3, [r3, #12]
 8000676:	683a      	ldr	r2, [r7, #0]
 8000678:	7a12      	ldrb	r2, [r2, #8]
 800067a:	431a      	orrs	r2, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	60da      	str	r2, [r3, #12]

	/* 5. configuration of parity control bit field */
	USARTx->CR1 |= UART_Config->Parity;				// USARTx->CR1 bit 10 PCE: Parity Control enable bit 9 PS: Parity selection
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	683a      	ldr	r2, [r7, #0]
 8000686:	7a52      	ldrb	r2, [r2, #9]
 8000688:	431a      	orrs	r2, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	60da      	str	r2, [r3, #12]

	/* 6. configuration the no. of stop bits */
	USARTx->CR2 |= UART_Config->StopBits;			// USART_CR2 bits 13:12 STOP: stop bits
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	691b      	ldr	r3, [r3, #16]
 8000692:	683a      	ldr	r2, [r7, #0]
 8000694:	7a92      	ldrb	r2, [r2, #10]
 8000696:	431a      	orrs	r2, r3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	611a      	str	r2, [r3, #16]


	/* 7. USART HW Flow Control */
	USARTx->CR3 |= UART_Config->HwFlowCtl;			// USART_CR3 bit 9 CTSE: CTS enable bit 8 RTSE: RTS enable
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	695b      	ldr	r3, [r3, #20]
 80006a0:	683a      	ldr	r2, [r7, #0]
 80006a2:	7ad2      	ldrb	r2, [r2, #11]
 80006a4:	431a      	orrs	r2, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	615a      	str	r2, [r3, #20]


	/* 8. configuration of BRR (baud-rate register) */
	if (USARTx == USART1)							// PCLK2 for USART1
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4a30      	ldr	r2, [pc, #192]	; (8000770 <MCAL_UART_Init+0x174>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d103      	bne.n	80006ba <MCAL_UART_Init+0xbe>

	{
		pclk = MCAL_RCC_GetPCLK2Freq();
 80006b2:	f7ff ff8f 	bl	80005d4 <MCAL_RCC_GetPCLK2Freq>
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	e002      	b.n	80006c0 <MCAL_UART_Init+0xc4>
	}
	else											// PCLK1 for USART2, 3

	{
		pclk = MCAL_RCC_GetPCLK1Freq();
 80006ba:	f7ff ff77 	bl	80005ac <MCAL_RCC_GetPCLK1Freq>
 80006be:	60f8      	str	r0, [r7, #12]
	}

	BRR = UART_BRR_Register(pclk, UART_Config->BaudRate);
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	011b      	lsls	r3, r3, #4
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80006cc:	0119      	lsls	r1, r3, #4
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	4613      	mov	r3, r2
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	4413      	add	r3, r2
 80006d6:	009a      	lsls	r2, r3, #2
 80006d8:	441a      	add	r2, r3
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	011b      	lsls	r3, r3, #4
 80006ea:	68f8      	ldr	r0, [r7, #12]
 80006ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80006f0:	2064      	movs	r0, #100	; 0x64
 80006f2:	fb00 f303 	mul.w	r3, r0, r3
 80006f6:	1ad3      	subs	r3, r2, r3
 80006f8:	011b      	lsls	r3, r3, #4
 80006fa:	4a22      	ldr	r2, [pc, #136]	; (8000784 <MCAL_UART_Init+0x188>)
 80006fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000700:	095b      	lsrs	r3, r3, #5
 8000702:	f003 030f 	and.w	r3, r3, #15
 8000706:	430b      	orrs	r3, r1
 8000708:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	68ba      	ldr	r2, [r7, #8]
 800070e:	609a      	str	r2, [r3, #8]

	/* 9. ENABLE / DISABLE Interrupt */
	if (UART_Config->IRQ_Enable != UART_IRQ_Enable_NONE)
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	7b1b      	ldrb	r3, [r3, #12]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d026      	beq.n	8000766 <MCAL_UART_Init+0x16a>
	{
		USARTx->CR1 |= (UART_Config->IRQ_Enable);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	683a      	ldr	r2, [r7, #0]
 800071e:	7b12      	ldrb	r2, [r2, #12]
 8000720:	431a      	orrs	r2, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	60da      	str	r2, [r3, #12]

		/* Enable NVIC for USARTx IRQ */
		if (USARTx == USART1)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4a11      	ldr	r2, [pc, #68]	; (8000770 <MCAL_UART_Init+0x174>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d106      	bne.n	800073c <MCAL_UART_Init+0x140>
			NVIC_IRQ37_USART1_EN();
 800072e:	4b16      	ldr	r3, [pc, #88]	; (8000788 <MCAL_UART_Init+0x18c>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a15      	ldr	r2, [pc, #84]	; (8000788 <MCAL_UART_Init+0x18c>)
 8000734:	f043 0320 	orr.w	r3, r3, #32
 8000738:	6013      	str	r3, [r2, #0]
			NVIC_IRQ38_USART2_EN();

		else if (USARTx == USART3)
			NVIC_IRQ39_USART3_EN();
	}
}
 800073a:	e014      	b.n	8000766 <MCAL_UART_Init+0x16a>
		else if (USARTx == USART2)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4a0f      	ldr	r2, [pc, #60]	; (800077c <MCAL_UART_Init+0x180>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d106      	bne.n	8000752 <MCAL_UART_Init+0x156>
			NVIC_IRQ38_USART2_EN();
 8000744:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MCAL_UART_Init+0x18c>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a0f      	ldr	r2, [pc, #60]	; (8000788 <MCAL_UART_Init+0x18c>)
 800074a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800074e:	6013      	str	r3, [r2, #0]
}
 8000750:	e009      	b.n	8000766 <MCAL_UART_Init+0x16a>
		else if (USARTx == USART3)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <MCAL_UART_Init+0x184>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d105      	bne.n	8000766 <MCAL_UART_Init+0x16a>
			NVIC_IRQ39_USART3_EN();
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MCAL_UART_Init+0x18c>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <MCAL_UART_Init+0x18c>)
 8000760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000764:	6013      	str	r3, [r2, #0]
}
 8000766:	bf00      	nop
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40013800 	.word	0x40013800
 8000774:	40021000 	.word	0x40021000
 8000778:	2000001c 	.word	0x2000001c
 800077c:	40014400 	.word	0x40014400
 8000780:	40014800 	.word	0x40014800
 8000784:	51eb851f 	.word	0x51eb851f
 8000788:	e000e104 	.word	0xe000e104

0800078c <MCAL_UART_SendData>:
 * 					- the value written in the MSB ( bit 7 or bit 8 depending on the data length ) has no effect
 * 					- because it is replaced by the parity
 * 					- when receiving with the parity enabled the value read in the MSB bit is the received parity bit
 */
void MCAL_UART_SendData(USART_Typedef* USARTx, uint16_t* pTxBuffer, enum Polling_Mechanism PollingEn)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	4613      	mov	r3, r2
 8000798:	71fb      	strb	r3, [r7, #7]
	/* 1. Wait until TXE flag is set in the SR */
	if (PollingEn == enable)
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	2b01      	cmp	r3, #1
 800079e:	d106      	bne.n	80007ae <MCAL_UART_SendData+0x22>
		 * The TXE bit is set by hardware and it indicates:
		 * The data has been moved from TDR to the shift register and the data transmission has started.
		 * The TDR register is empty.
		 * The next data can be written in the USART_DR register without overwriting the previous data.
		 */
		while (!(USARTx->SR & 1<<7));
 80007a0:	bf00      	nop
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d0f9      	beq.n	80007a2 <MCAL_UART_SendData+0x16>
	/* When Transmitting with the parity enabled (PCE bit set to 1 in the USART_CR1 register),
	 * the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect
	 * because it is replaced by the parity.
	 * When receiving with the parity enabled, the value read in the MSB bit is the received parity bit.
	 */
	if (USARTx == USART1)
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	4a17      	ldr	r2, [pc, #92]	; (8000810 <MCAL_UART_SendData+0x84>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d10a      	bne.n	80007cc <MCAL_UART_SendData+0x40>
	{
		if (Global_USART_Config[0]->Payload_Length == UART_Payload_Length_8B)
 80007b6:	4b17      	ldr	r3, [pc, #92]	; (8000814 <MCAL_UART_SendData+0x88>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	7a1b      	ldrb	r3, [r3, #8]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d122      	bne.n	8000806 <MCAL_UART_SendData+0x7a>
		{
			USARTx->DR = (*pTxBuffer) & (uint8_t)0xFF ;
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	605a      	str	r2, [r3, #4]
		else if (Global_USART_Config[2]->Payload_Length == UART_Payload_Length_9B)
		{
			USARTx->DR = (*pTxBuffer) & (uint16_t)0x1FF ;
		}
	}
}
 80007ca:	e01c      	b.n	8000806 <MCAL_UART_SendData+0x7a>
	else if (USARTx == USART2)
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	4a12      	ldr	r2, [pc, #72]	; (8000818 <MCAL_UART_SendData+0x8c>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d10a      	bne.n	80007ea <MCAL_UART_SendData+0x5e>
		if (Global_USART_Config[1]->Payload_Length == UART_Payload_Length_8B)
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MCAL_UART_SendData+0x88>)
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	7a1b      	ldrb	r3, [r3, #8]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d113      	bne.n	8000806 <MCAL_UART_SendData+0x7a>
			USARTx->DR = (*pTxBuffer) & (uint8_t)0xFF ;
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	881b      	ldrh	r3, [r3, #0]
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	605a      	str	r2, [r3, #4]
}
 80007e8:	e00d      	b.n	8000806 <MCAL_UART_SendData+0x7a>
	else if (USARTx == USART3)
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	4a0b      	ldr	r2, [pc, #44]	; (800081c <MCAL_UART_SendData+0x90>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d109      	bne.n	8000806 <MCAL_UART_SendData+0x7a>
		if (Global_USART_Config[2]->Payload_Length == UART_Payload_Length_8B)
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <MCAL_UART_SendData+0x88>)
 80007f4:	689b      	ldr	r3, [r3, #8]
 80007f6:	7a1b      	ldrb	r3, [r3, #8]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d104      	bne.n	8000806 <MCAL_UART_SendData+0x7a>
			USARTx->DR = (*pTxBuffer) & (uint8_t)0xFF ;
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	b2da      	uxtb	r2, r3
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	605a      	str	r2, [r3, #4]
}
 8000806:	bf00      	nop
 8000808:	3714      	adds	r7, #20
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr
 8000810:	40013800 	.word	0x40013800
 8000814:	2000001c 	.word	0x2000001c
 8000818:	40014400 	.word	0x40014400
 800081c:	40014800 	.word	0x40014800

08000820 <MCAL_UART_ReceiveData>:
	/* Wait till TC flag is set in the SR */
	while(!(USARTx->SR & 1<<6));
}

void MCAL_UART_ReceiveData(USART_Typedef* USARTx, uint16_t* pRxBuffer, enum Polling_Mechanism PollingEn)
{
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	4613      	mov	r3, r2
 800082c:	71fb      	strb	r3, [r7, #7]
	/* 1. Wait until RXNE flag is set in the SR */
	if (PollingEn == enable)
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d106      	bne.n	8000842 <MCAL_UART_ReceiveData+0x22>
	{
		while (!(USARTx->SR & 1<<5));
 8000834:	bf00      	nop
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f003 0320 	and.w	r3, r3, #32
 800083e:	2b00      	cmp	r3, #0
 8000840:	d0f9      	beq.n	8000836 <MCAL_UART_ReceiveData+0x16>
	}

	/* 2. Check the USART_WordLength item for 9-bit or 8-bit in a frame */
	if (USARTx == USART1)
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	4a28      	ldr	r2, [pc, #160]	; (80008e8 <MCAL_UART_ReceiveData+0xc8>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d115      	bne.n	8000876 <MCAL_UART_ReceiveData+0x56>
			}
		}
		/* 8 Bits Data */
		else
		{
			if (Global_USART_Config[0]->Parity == UART_Parity_NONE)
 800084a:	4b28      	ldr	r3, [pc, #160]	; (80008ec <MCAL_UART_ReceiveData+0xcc>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	7a5b      	ldrb	r3, [r3, #9]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d107      	bne.n	8000864 <MCAL_UART_ReceiveData+0x44>
			{
				/* All 8 bits are data */
				*pRxBuffer = USARTx->DR & (uint8_t)0xFF  ;
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	b29b      	uxth	r3, r3
 800085a:	b2db      	uxtb	r3, r3
 800085c:	b29a      	uxth	r2, r3
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	801a      	strh	r2, [r3, #0]
				/* just least 7 bits are data */
				*pRxBuffer = USARTx->DR & (uint8_t)0x7F ;
			}
		}
	}
}
 8000862:	e03b      	b.n	80008dc <MCAL_UART_ReceiveData+0xbc>
				*pRxBuffer = USARTx->DR & (uint8_t)0x7F ;
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	b29b      	uxth	r3, r3
 800086a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800086e:	b29a      	uxth	r2, r3
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	801a      	strh	r2, [r3, #0]
}
 8000874:	e032      	b.n	80008dc <MCAL_UART_ReceiveData+0xbc>
	else if (USARTx == USART2)
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	4a1d      	ldr	r2, [pc, #116]	; (80008f0 <MCAL_UART_ReceiveData+0xd0>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d115      	bne.n	80008aa <MCAL_UART_ReceiveData+0x8a>
			if (Global_USART_Config[1]->Parity == UART_Parity_NONE)
 800087e:	4b1b      	ldr	r3, [pc, #108]	; (80008ec <MCAL_UART_ReceiveData+0xcc>)
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	7a5b      	ldrb	r3, [r3, #9]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d107      	bne.n	8000898 <MCAL_UART_ReceiveData+0x78>
				*pRxBuffer = USARTx->DR & (uint8_t)0xFF  ;
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	b29b      	uxth	r3, r3
 800088e:	b2db      	uxtb	r3, r3
 8000890:	b29a      	uxth	r2, r3
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	801a      	strh	r2, [r3, #0]
}
 8000896:	e021      	b.n	80008dc <MCAL_UART_ReceiveData+0xbc>
				*pRxBuffer = USARTx->DR & (uint8_t)0x7F ;
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	b29b      	uxth	r3, r3
 800089e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	801a      	strh	r2, [r3, #0]
}
 80008a8:	e018      	b.n	80008dc <MCAL_UART_ReceiveData+0xbc>
	else if (USARTx == USART3)
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	4a11      	ldr	r2, [pc, #68]	; (80008f4 <MCAL_UART_ReceiveData+0xd4>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d114      	bne.n	80008dc <MCAL_UART_ReceiveData+0xbc>
			if (Global_USART_Config[2]->Parity == UART_Parity_NONE)
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MCAL_UART_ReceiveData+0xcc>)
 80008b4:	689b      	ldr	r3, [r3, #8]
 80008b6:	7a5b      	ldrb	r3, [r3, #9]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d107      	bne.n	80008cc <MCAL_UART_ReceiveData+0xac>
				*pRxBuffer = USARTx->DR & (uint8_t)0xFF  ;
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	801a      	strh	r2, [r3, #0]
}
 80008ca:	e007      	b.n	80008dc <MCAL_UART_ReceiveData+0xbc>
				*pRxBuffer = USARTx->DR & (uint8_t)0x7F ;
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	801a      	strh	r2, [r3, #0]
}
 80008dc:	bf00      	nop
 80008de:	3714      	adds	r7, #20
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40013800 	.word	0x40013800
 80008ec:	2000001c 	.word	0x2000001c
 80008f0:	40014400 	.word	0x40014400
 80008f4:	40014800 	.word	0x40014800

080008f8 <MCAL_UART_GPIO_Set_Pins>:
 * @param[in]		- USARTx: where x can be (1..3 depending on device used)
 * @retval 			- None
 * @Notes			- Should enable the corresponding ALT & GPIO in RCC clock . Also called after MCAL_UART_Init()
 */
void MCAL_UART_GPIO_Set_Pins(USART_Typedef* USARTx)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t Pin_Config;

	if (USARTx == USART1)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4a3b      	ldr	r2, [pc, #236]	; (80009f0 <MCAL_UART_GPIO_Set_Pins+0xf8>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d118      	bne.n	800093a <MCAL_UART_GPIO_Set_Pins+0x42>
		// PA10 Rx
		// PA11 CTS
		// PA12 RTS

		// PA9 Tx
		Pin_Config.GPIO_PinNumber = GPIO_PIN_9;
 8000908:	f44f 7300 	mov.w	r3, #512	; 0x200
 800090c:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 800090e:	2306      	movs	r3, #6
 8000910:	73bb      	strb	r3, [r7, #14]
		Pin_Config.GPIO_Speed = GPIO_SPEED_10M;
 8000912:	2301      	movs	r3, #1
 8000914:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8000916:	f107 030c 	add.w	r3, r7, #12
 800091a:	4619      	mov	r1, r3
 800091c:	4835      	ldr	r0, [pc, #212]	; (80009f4 <MCAL_UART_GPIO_Set_Pins+0xfc>)
 800091e:	f7ff fd9a 	bl	8000456 <MCAL_GPIO_Init>

		// PA10 Rx
		Pin_Config.GPIO_PinNumber = GPIO_PIN_10;
 8000922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000926:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_Mode = GPIO_MODE_INPUT_AF;
 8000928:	2308      	movs	r3, #8
 800092a:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &Pin_Config);
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	4619      	mov	r1, r3
 8000932:	4830      	ldr	r0, [pc, #192]	; (80009f4 <MCAL_UART_GPIO_Set_Pins+0xfc>)
 8000934:	f7ff fd8f 	bl	8000456 <MCAL_GPIO_Init>
			Pin_Config.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
			Pin_Config.GPIO_Speed = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOA, &Pin_Config);
		}
	}
}
 8000938:	e055      	b.n	80009e6 <MCAL_UART_GPIO_Set_Pins+0xee>
	else if (USARTx == USART2)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4a2e      	ldr	r2, [pc, #184]	; (80009f8 <MCAL_UART_GPIO_Set_Pins+0x100>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d125      	bne.n	800098e <MCAL_UART_GPIO_Set_Pins+0x96>
		Pin_Config.GPIO_PinNumber = GPIO_PIN_2;
 8000942:	2304      	movs	r3, #4
 8000944:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000946:	2306      	movs	r3, #6
 8000948:	73bb      	strb	r3, [r7, #14]
		Pin_Config.GPIO_Speed = GPIO_SPEED_10M;
 800094a:	2301      	movs	r3, #1
 800094c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &Pin_Config);
 800094e:	f107 030c 	add.w	r3, r7, #12
 8000952:	4619      	mov	r1, r3
 8000954:	4827      	ldr	r0, [pc, #156]	; (80009f4 <MCAL_UART_GPIO_Set_Pins+0xfc>)
 8000956:	f7ff fd7e 	bl	8000456 <MCAL_GPIO_Init>
		Pin_Config.GPIO_PinNumber = GPIO_PIN_3;
 800095a:	2308      	movs	r3, #8
 800095c:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_Mode = GPIO_MODE_INPUT_AF;
 800095e:	2308      	movs	r3, #8
 8000960:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8000962:	f107 030c 	add.w	r3, r7, #12
 8000966:	4619      	mov	r1, r3
 8000968:	4822      	ldr	r0, [pc, #136]	; (80009f4 <MCAL_UART_GPIO_Set_Pins+0xfc>)
 800096a:	f7ff fd74 	bl	8000456 <MCAL_GPIO_Init>
		if (Global_USART_Config[1]->HwFlowCtl || Global_USART_Config[1]->HwFlowCtl == UART_HwFlowCtl_CTS)
 800096e:	4b23      	ldr	r3, [pc, #140]	; (80009fc <MCAL_UART_GPIO_Set_Pins+0x104>)
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	7adb      	ldrb	r3, [r3, #11]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d036      	beq.n	80009e6 <MCAL_UART_GPIO_Set_Pins+0xee>
			Pin_Config.GPIO_PinNumber = GPIO_PIN_0;
 8000978:	2301      	movs	r3, #1
 800097a:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 800097c:	2301      	movs	r3, #1
 800097e:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8000980:	f107 030c 	add.w	r3, r7, #12
 8000984:	4619      	mov	r1, r3
 8000986:	481b      	ldr	r0, [pc, #108]	; (80009f4 <MCAL_UART_GPIO_Set_Pins+0xfc>)
 8000988:	f7ff fd65 	bl	8000456 <MCAL_GPIO_Init>
}
 800098c:	e02b      	b.n	80009e6 <MCAL_UART_GPIO_Set_Pins+0xee>
	else if (USARTx == USART3)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a1b      	ldr	r2, [pc, #108]	; (8000a00 <MCAL_UART_GPIO_Set_Pins+0x108>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d127      	bne.n	80009e6 <MCAL_UART_GPIO_Set_Pins+0xee>
		Pin_Config.GPIO_PinNumber = GPIO_PIN_10;
 8000996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800099a:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 800099c:	2306      	movs	r3, #6
 800099e:	73bb      	strb	r3, [r7, #14]
		Pin_Config.GPIO_Speed = GPIO_SPEED_10M;
 80009a0:	2301      	movs	r3, #1
 80009a2:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &Pin_Config);
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	4619      	mov	r1, r3
 80009aa:	4816      	ldr	r0, [pc, #88]	; (8000a04 <MCAL_UART_GPIO_Set_Pins+0x10c>)
 80009ac:	f7ff fd53 	bl	8000456 <MCAL_GPIO_Init>
		Pin_Config.GPIO_PinNumber = GPIO_PIN_11;
 80009b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009b4:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_Mode = GPIO_MODE_INPUT_AF;
 80009b6:	2308      	movs	r3, #8
 80009b8:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &Pin_Config);
 80009ba:	f107 030c 	add.w	r3, r7, #12
 80009be:	4619      	mov	r1, r3
 80009c0:	4810      	ldr	r0, [pc, #64]	; (8000a04 <MCAL_UART_GPIO_Set_Pins+0x10c>)
 80009c2:	f7ff fd48 	bl	8000456 <MCAL_GPIO_Init>
		if (Global_USART_Config[2]->HwFlowCtl || Global_USART_Config[2]->HwFlowCtl == UART_HwFlowCtl_CTS)
 80009c6:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <MCAL_UART_GPIO_Set_Pins+0x104>)
 80009c8:	689b      	ldr	r3, [r3, #8]
 80009ca:	7adb      	ldrb	r3, [r3, #11]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d00a      	beq.n	80009e6 <MCAL_UART_GPIO_Set_Pins+0xee>
			Pin_Config.GPIO_PinNumber = GPIO_PIN_13;
 80009d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009d4:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 80009d6:	2301      	movs	r3, #1
 80009d8:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &Pin_Config);
 80009da:	f107 030c 	add.w	r3, r7, #12
 80009de:	4619      	mov	r1, r3
 80009e0:	4808      	ldr	r0, [pc, #32]	; (8000a04 <MCAL_UART_GPIO_Set_Pins+0x10c>)
 80009e2:	f7ff fd38 	bl	8000456 <MCAL_GPIO_Init>
}
 80009e6:	bf00      	nop
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40013800 	.word	0x40013800
 80009f4:	40010800 	.word	0x40010800
 80009f8:	40014400 	.word	0x40014400
 80009fc:	2000001c 	.word	0x2000001c
 8000a00:	40014800 	.word	0x40014800
 8000a04:	40010c00 	.word	0x40010c00

08000a08 <USART1_IRQHandler>:

void USART1_IRQHandler (void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	Global_USART_Config[0]->P_IRQ_CallBack();
 8000a0c:	4b02      	ldr	r3, [pc, #8]	; (8000a18 <USART1_IRQHandler+0x10>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	691b      	ldr	r3, [r3, #16]
 8000a12:	4798      	blx	r3
}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	2000001c 	.word	0x2000001c

08000a1c <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	Global_USART_Config[1]->P_IRQ_CallBack();
 8000a20:	4b02      	ldr	r3, [pc, #8]	; (8000a2c <USART2_IRQHandler+0x10>)
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	691b      	ldr	r3, [r3, #16]
 8000a26:	4798      	blx	r3
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	2000001c 	.word	0x2000001c

08000a30 <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
	Global_USART_Config[2]->P_IRQ_CallBack();
 8000a34:	4b02      	ldr	r3, [pc, #8]	; (8000a40 <USART3_IRQHandler+0x10>)
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	691b      	ldr	r3, [r3, #16]
 8000a3a:	4798      	blx	r3
}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	2000001c 	.word	0x2000001c

08000a44 <clock_init>:
#include "MCAL/stm32f103x6.h"
#include "MCAL/Stm32_F103C6_EXTI.h"
#include "MCAL/Stm32_F103C6_GPIO.h"
#include "MCAL/Stm32_F103C6_USART.h"
void clock_init()
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
	// Using internal 8 MHz RC oscillator
	RCC_GPIOA_CLK_EN();
 8000a48:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <clock_init+0x24>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	4a06      	ldr	r2, [pc, #24]	; (8000a68 <clock_init+0x24>)
 8000a4e:	f043 0304 	orr.w	r3, r3, #4
 8000a52:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000a54:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <clock_init+0x24>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	4a03      	ldr	r2, [pc, #12]	; (8000a68 <clock_init+0x24>)
 8000a5a:	f043 0308 	orr.w	r3, r3, #8
 8000a5e:	6193      	str	r3, [r2, #24]

}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr
 8000a68:	40021000 	.word	0x40021000

08000a6c <main>:
}


uint16_t ch;
int main(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0

	clock_init();
 8000a72:	f7ff ffe7 	bl	8000a44 <clock_init>
	USART_Config_t uart_config;
	uart_config.BaudRate = UART_BaudRate_115200;
 8000a76:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000a7a:	60bb      	str	r3, [r7, #8]
	uart_config.HwFlowCtl = UART_HwFlowCtl_NONE;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	73fb      	strb	r3, [r7, #15]
	uart_config.IRQ_Enable = UART_IRQ_Enable_NONE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	743b      	strb	r3, [r7, #16]
	uart_config.Parity = UART_Parity_NONE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	737b      	strb	r3, [r7, #13]
	uart_config.Payload_Length = UART_Payload_Length_8B;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	733b      	strb	r3, [r7, #12]
	uart_config.StopBits = UART_StopBits_1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	73bb      	strb	r3, [r7, #14]
	uart_config.USART_Mode = UART_Mode_TX_RX;
 8000a90:	230c      	movs	r3, #12
 8000a92:	713b      	strb	r3, [r7, #4]
	MCAL_UART_Init(USART1, &uart_config);
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	4619      	mov	r1, r3
 8000a98:	4808      	ldr	r0, [pc, #32]	; (8000abc <main+0x50>)
 8000a9a:	f7ff fdaf 	bl	80005fc <MCAL_UART_Init>


	MCAL_UART_GPIO_Set_Pins(USART1);
 8000a9e:	4807      	ldr	r0, [pc, #28]	; (8000abc <main+0x50>)
 8000aa0:	f7ff ff2a 	bl	80008f8 <MCAL_UART_GPIO_Set_Pins>


	while(1)
	{
		MCAL_UART_ReceiveData(USART1, &ch, enable);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	4906      	ldr	r1, [pc, #24]	; (8000ac0 <main+0x54>)
 8000aa8:	4804      	ldr	r0, [pc, #16]	; (8000abc <main+0x50>)
 8000aaa:	f7ff feb9 	bl	8000820 <MCAL_UART_ReceiveData>
		MCAL_UART_SendData(USART1, &ch, enable);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	4903      	ldr	r1, [pc, #12]	; (8000ac0 <main+0x54>)
 8000ab2:	4802      	ldr	r0, [pc, #8]	; (8000abc <main+0x50>)
 8000ab4:	f7ff fe6a 	bl	800078c <MCAL_UART_SendData>
		MCAL_UART_ReceiveData(USART1, &ch, enable);
 8000ab8:	e7f4      	b.n	8000aa4 <main+0x38>
 8000aba:	bf00      	nop
 8000abc:	40013800 	.word	0x40013800
 8000ac0:	20000064 	.word	0x20000064

08000ac4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ac4:	480d      	ldr	r0, [pc, #52]	; (8000afc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ac6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ac8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000acc:	480c      	ldr	r0, [pc, #48]	; (8000b00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ace:	490d      	ldr	r1, [pc, #52]	; (8000b04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ad0:	4a0d      	ldr	r2, [pc, #52]	; (8000b08 <LoopForever+0xe>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad4:	e002      	b.n	8000adc <LoopCopyDataInit>

08000ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ada:	3304      	adds	r3, #4

08000adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae0:	d3f9      	bcc.n	8000ad6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ae4:	4c0a      	ldr	r4, [pc, #40]	; (8000b10 <LoopForever+0x16>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae8:	e001      	b.n	8000aee <LoopFillZerobss>

08000aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aec:	3204      	adds	r2, #4

08000aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af0:	d3fb      	bcc.n	8000aea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000af2:	f000 f811 	bl	8000b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000af6:	f7ff ffb9 	bl	8000a6c <main>

08000afa <LoopForever>:

LoopForever:
    b LoopForever
 8000afa:	e7fe      	b.n	8000afa <LoopForever>
  ldr   r0, =_estack
 8000afc:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b04:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000b08:	08000b98 	.word	0x08000b98
  ldr r2, =_sbss
 8000b0c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000b10:	20000068 	.word	0x20000068

08000b14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b14:	e7fe      	b.n	8000b14 <ADC1_2_IRQHandler>
	...

08000b18 <__libc_init_array>:
 8000b18:	b570      	push	{r4, r5, r6, lr}
 8000b1a:	2500      	movs	r5, #0
 8000b1c:	4e0c      	ldr	r6, [pc, #48]	; (8000b50 <__libc_init_array+0x38>)
 8000b1e:	4c0d      	ldr	r4, [pc, #52]	; (8000b54 <__libc_init_array+0x3c>)
 8000b20:	1ba4      	subs	r4, r4, r6
 8000b22:	10a4      	asrs	r4, r4, #2
 8000b24:	42a5      	cmp	r5, r4
 8000b26:	d109      	bne.n	8000b3c <__libc_init_array+0x24>
 8000b28:	f000 f81a 	bl	8000b60 <_init>
 8000b2c:	2500      	movs	r5, #0
 8000b2e:	4e0a      	ldr	r6, [pc, #40]	; (8000b58 <__libc_init_array+0x40>)
 8000b30:	4c0a      	ldr	r4, [pc, #40]	; (8000b5c <__libc_init_array+0x44>)
 8000b32:	1ba4      	subs	r4, r4, r6
 8000b34:	10a4      	asrs	r4, r4, #2
 8000b36:	42a5      	cmp	r5, r4
 8000b38:	d105      	bne.n	8000b46 <__libc_init_array+0x2e>
 8000b3a:	bd70      	pop	{r4, r5, r6, pc}
 8000b3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b40:	4798      	blx	r3
 8000b42:	3501      	adds	r5, #1
 8000b44:	e7ee      	b.n	8000b24 <__libc_init_array+0xc>
 8000b46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b4a:	4798      	blx	r3
 8000b4c:	3501      	adds	r5, #1
 8000b4e:	e7f2      	b.n	8000b36 <__libc_init_array+0x1e>
 8000b50:	08000b90 	.word	0x08000b90
 8000b54:	08000b90 	.word	0x08000b90
 8000b58:	08000b90 	.word	0x08000b90
 8000b5c:	08000b94 	.word	0x08000b94

08000b60 <_init>:
 8000b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b62:	bf00      	nop
 8000b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b66:	bc08      	pop	{r3}
 8000b68:	469e      	mov	lr, r3
 8000b6a:	4770      	bx	lr

08000b6c <_fini>:
 8000b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b6e:	bf00      	nop
 8000b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b72:	bc08      	pop	{r3}
 8000b74:	469e      	mov	lr, r3
 8000b76:	4770      	bx	lr
